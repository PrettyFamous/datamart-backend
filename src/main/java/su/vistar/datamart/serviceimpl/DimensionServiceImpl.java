package su.vistar.datamart.serviceimpl;

import com.ibm.icu.text.Transliterator;
import lombok.AllArgsConstructor;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import su.vistar.datamart.entity.Dimension;
import su.vistar.datamart.entity.User;
import su.vistar.datamart.exception.ResourceAlreadyExistsException;
import su.vistar.datamart.exception.ResourceNotFoundException;
import su.vistar.datamart.model.DimensionInfoModel;
import su.vistar.datamart.model.DimensionModel;
import su.vistar.datamart.model.PageDTO;
import su.vistar.datamart.repository.DataRepository;
import su.vistar.datamart.repository.DimensionRepository;
import su.vistar.datamart.repository.UserRepository;
import su.vistar.datamart.service.DimensionService;

import java.util.Calendar;
import java.util.List;


@Service
@AllArgsConstructor
public class DimensionServiceImpl implements DimensionService {
    private final DimensionRepository dimensionRepository;
    private final UserRepository userRepository;
    private final DataRepository dataRepository;
    private final Transliterator toLatinTrans = Transliterator.getInstance("Russian-Latin/BGN");
    private final JdbcTemplate jdbcTemplate;

    @Override
    public Dimension getDimensionById(Long id) {
        return dimensionRepository
                .findById(id)
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Resource \"Dimension\" with id=" + id + " does not exist"
                ));
    }

    @Override
    public String[] getDimensionValuesById(Long id) {
        Dimension dimension = dimensionRepository
                .findById(id)
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Resource \"Dimension\" with id=" + id + " does not exist"
                ));

        List<String> columns = dimensionRepository.getSystemTableColumns(dimension.getSystemName().toLowerCase());

        String querryColumns = "";
        for (int i=1; i<columns.size(); i++) {
            querryColumns += columns.get(i);

            if (i != columns.size()-1) {
                querryColumns += ", ";
            }
        }

        String[] values = dataRepository.GetValues(dimension.getSystemName(), querryColumns);

        return values; // FIXME только джля одной колонки в dimensions!!
    }

    @Override
    public DimensionInfoModel getDimensionInfoById(Long id) {
        Dimension dimension = dimensionRepository
                .findById(id)
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Resource \"Dimension\" with id=" + id + " does not exist"
                ));

        List<String> columns = dimensionRepository.getSystemTableColumns(dimension.getSystemName().toLowerCase());
        String[] arrayColumns = new String[columns.size()];
        for (int i=0; i< columns.size(); i++) {
            arrayColumns[i] = columns.get(i);
        }
        arrayColumns[0] = "id";

        // Получить сами данные в таблице
        String queryColumns = columns.toString();
        List<String[]> rows = dataRepository.GetData(dimension.getSystemName(), queryColumns.substring(1, queryColumns.length()-1));


        DimensionInfoModel dimInfoModel = new DimensionInfoModel(
                dimension.getId(),
                dimension.getName(),
                arrayColumns,
                rows
        );

        return dimInfoModel;
    }

    @Override
    public Page<Dimension> getDimensions(String name, PageDTO pageDTO) {
        if (name == "") {
            return dimensionRepository.findAll(pageDTO.getPageable());
        } else {
            return dimensionRepository.findAllByName(name, pageDTO.getPageable());
        }
    }

    @Override
    public Dimension addDimension(DimensionModel dimensionModel) {
        User user = userRepository
                .findById(dimensionModel.getUserId())
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Resource \"Namespace\" with id=" + dimensionModel.getUserId() + " does not exist."));

        if (dimensionRepository.existsByName( dimensionModel.getName() )) {
            throw new ResourceAlreadyExistsException("Dimension with such name already exists.");
        }

        if (Character.isDigit(dimensionModel.getName().charAt(0))) {
            throw new IllegalArgumentException("Could not create table with digit at first position");
        }

        String systemName = toLatinTrans.transliterate(dimensionModel.getName()).replaceAll(" ", "_");
        systemName += "_" + dimensionRepository.getUniqueVal();

        String query = "CREATE TABLE " + systemName + "(" +
                "id_" + systemName + " integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY" + ");";
        jdbcTemplate.execute(query);

        Dimension dimension = new Dimension(
                dimensionModel.getName(),
                systemName,
                Calendar.getInstance(),
                user
        );
        dimensionRepository.save(dimension);

        return dimension;
    }

    @Override
    public void deleteById(Long id) {
        try {
            jdbcTemplate.execute("DELETE FROM dimension_attr WHERE id_dimension=" + id + ";");
            jdbcTemplate.execute("DROP TABLE " + dimensionRepository.findById(id).get().getSystemName() +";");

            dimensionRepository.deleteById(id);
        } catch (EmptyResultDataAccessException e) {
            throw new ResourceNotFoundException("Dimension with id " + id + " does not exist.", e);
        }
    }


}
